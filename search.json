[{"path":"https://inseefr.github.io/disaggR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"The MIT License (MIT)","title":"The MIT License (MIT)","text":"Copyright © 2020 INSEE (http://www.insee.fr). Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://inseefr.github.io/disaggR/articles/disaggr.html","id":"two-steps-benchmarks","dir":"Articles","previous_headings":"","what":"Two-Steps Benchmarks","title":"Introduction to disaggR","text":"two-steps benchmarks, provided twoStepsBenchmark(), rely high-frequency formula: \\[ C =  * + u \\] : \\(C\\), univariate time series, high-frequency account. \\(\\), matrix time series, combines columns indicators, outliers constant. include.differenciation TRUE, constant actually trend. \\(\\), numeric vector, stands coefficients applied. \\(u\\), univariate time series, smoothed part benchmark. coefficients estimated low-frequency, within coeff.calc window, eventually differentiation include.differenciation TRUE: \\[ C_{aggregated}' =  I_{aggregated}' * + u' \\] include.rho TRUE, \\(u'\\) AR1 process autocorrelation parameter, \\(\\) estimated Prais-Winsten process. Otherwise, ordinary least squares process used. coefficients applied high-frequency, obtain fitted values benchmark: \\[ \\text{fitted.values} = * \\] Note , especially include.differenciation TRUE, level fitted values arbitrary: constant chosen zero implicit reintegration. choice constant, however, doesn’t impact benchmarked series. u smoothed: \\[ u = smooth(extrapolation(C_{aggregated} - \\text{fitted.values}_{aggregated})) \\] low-frequency values \\(C\\) set beginning, fitted values just computed, aggregated values \\(u\\) known. values aren’t defined across domain window, extrapolated follow: \\(u(n+1)-u(n) = rho*(u(n)-u(n-1))\\) include.differenciation TRUE \\(u(n+1) = rho * u(n)\\) include.differenciation FALSE Boot, Feibes Lisman process, bflSmooth() function, used get high-frequency values u across domain window.","code":"twoStepsBenchmark(turnover,construction)"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr.html","id":"proportional-denton-benchmarks","dir":"Articles","previous_headings":"","what":"Proportional Denton Benchmarks","title":"Introduction to disaggR","text":"Proportional Denton Benchmarks, provided threeRuleSmooth(), rely high-frequency formula: \\[ C =  \\odot \\] : \\(C\\), univariate time series, high-frequency account \\(\\), univariate time series, indicator \\(\\), univariate time series, coefficient applied, rate smoothed. Proportional Denton benchmarks share similarities univariate two-steps benchmarks without constants. differences: coefficient \\(\\) constant. smoothed part, \\(\\) already smoothed \\(\\odot \\) equal \\(C\\) aggregation. order smooth rate, steps required. alternate version computed, used smoothing: \\[ ' = replication(crop()) \\] full cycles kept, first last full cycles replicated respectively backwards forwards fill domain window. low-frequency rate already known \\(C \\oslash \\) defined. rate extrapolated fill domain window: \\[ a_{aggregated}' = extrapolation(C_{aggregated} \\oslash I_{aggregated}) \\] extrapolation bit problematic natural extrapolations provided twoStepsBenchmark(). Indeed, proportional Denton benchmarks don’t involve hypothesis \\(\\), continuity. continuity isn’t enough, proportional Denton benchmarks mainly used rates trend, rates extrapolated using arithmetic sequence. default, common difference sequence given mean rate differences within delta rate window. high-frequency rate can computed help weighted Boot, Feibes Lisman process: \\[ = smooth(a_{aggregated}',weights=') \\]","code":"threeRuleSmooth(turnover,construction)"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Introduction to disaggR","text":"disaggR provides tools plotting results. Functions in_sample(), in_disaggr(), in_scatter(), in_revisions() generate objects class \"tscomparison\". object class \"tscomparison\", \"twoStepsBenchmark\" \"threeRuleSmooth\" can plotted either base plot() ggplot2 autoplot() method. methods share similar arguments: x (object autoplot method) tscomparison, twoStepsBenchmark threeRuleSmooth xlab, title x axis ylab, title y axis start, numeric length 1 2. start plot end, numeric length 1 2. end plot col, color scale applied plot. vector colors, function n color vector size n. lty, linetype scales applied plot. vector linetypes, function n linetypes vector size n. show.legend, TRUE FALSE. automatic legend added plot. main, character length 1, title plot mar, numeric length 4, margins plot specified form c(bottom, left, top, right). theme, ggplot theme object replace default one (autoplot methods) …, arguments passed either ggplot plot","code":"benchmark <- twoStepsBenchmark(hfserie = turnover,                                lfserie = construction,                                include.differenciation = TRUE) plot(in_sample(benchmark,type=\"levels\"),      start=c(2010,1),end=c(2017,1)) library(ggplot2) smooth <- threeRuleSmooth(hfserie = turnover,                           lfserie = construction) autoplot(in_disaggr(smooth),          start=c(2009,1),end=c(2013,12),          show.legend = FALSE)"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr.html","id":"other-methods","dir":"Articles","previous_headings":"","what":"Other methods","title":"Introduction to disaggR","text":"Various methods can applied objects class \"twoStepsBenchmark\" /\"threeRuleSmooth\". Additionally, methods time series, package stats, automatically coerce objects time-series using .ts().","code":"benchmark <- twoStepsBenchmark(turnover,construction) smooth <- threeRuleSmooth(turnover,construction)  reView(benchmark) rePort(benchmark)  as.ts(benchmark);as.ts(smooth) as.list(benchmark);as.list(smooth) coef(benchmark) residuals(benchmark) vcov(benchmark) fitted(benchmark) model.list(benchmark);model.list(smooth) se(benchmark) rho(benchmark) outliers(benchmark) smoothed.rate(smooth) summary(benchmark)"},{"path":[]},{"path":"https://inseefr.github.io/disaggR/articles/disaggr_outlier.html","id":"what-happens-without-outliers","dir":"Articles","previous_headings":"The case with annual accounts","what":"What happens without outliers","title":"Outliers in two-step benchmarks","text":"use monthly, seasonally working days adjusted (SA-WDA) turnover index (base 100 2015) indicator monthly household actual final consumption current M euros, benchmarked corresponding annual account, known 20211.  Let’s first use basic model, levels without constant : can compare indicator estimated QNA series2 :   timing Covid restrictions clearly apparent indicator (HF serie) benchmarked account (benchmark), first lockdown March May 2020, second lockdown November 2020, followed curfew strong impact consumptions hotel restaurant services, June 2021. January 2022, drop activity due Omicron variant Covid-19 virus, lockdown large number people affected quarantine home. benchmark quite good, account follows closely indicator, scaled-evolutions. can clearly see account decrease consumption mid-2019, present indicator. artefact caused smoothing residual. sharp 6 b€ drop annual residual 2019 2020, smoothing procedure tries compute monthly series gradual drop, thus starting decrease May 2019, clearly absurd case.  thus significant contribution smoothed part QNA evolution 2019-2020 :","code":"par(mfrow=c(1,2)) plot(turnover_catering) plot(consumption_catering) benchmark <- twoStepsBenchmark(turnover_catering,consumption_catering) plot(in_disaggr(benchmark, type=\"levels-rebased\"), start=c(2010,1)) plot(in_disaggr(benchmark), start=c(2018,1)) par(mfrow=c(1,2)) plot(residuals(benchmark)) plot(smoothed.part(benchmark)) plot(in_disaggr(benchmark, type =\"contributions\"), start=2018)"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr_outlier.html","id":"introduction-of-outliers","dir":"Articles","previous_headings":"The case with annual accounts","what":"Introduction of outliers","title":"Outliers in two-step benchmarks","text":"idea behind outlier capture larger usual residual affect correct months quarters. don’t know larger usual gap indicator account, pretty sure related Covid lockdowns. thus better assumption try disaggregate residual according measure stringency lockdowns rather smoothing agnostically year 2019 2022. lot ways build outlier indicator, convenient way derive usual indicator. example, see turnover index close 130 lockdowns. Thus distance 130 good indicator intensity crisis :  absolute value indicator lower 2 January February 2020 August 2021, set 0 months, restricting outliers lockdowns period. idea add outlier benchmark relation, additive outliers : \\[ C =  * + * b + u \\] : \\(C\\), univariate time series, high-frequency account. \\(\\), matrix time series, combines columns indicators constant. \\(\\), numeric vector, stands coefficients applied. \\(\\) matrix time series ouliers. one additive outliers, completed 0 outside 2020-2021 period. \\(b\\), numeric vector, stands coefficients applied outliers. \\(u\\), univariate time series, smoothed part benchmark. coefficients estimated low-frequency annual accounts, annualized turnover index aggregated outlier : \\[ C_{aggregated}' =  I_{aggregated}' * + out_{aggregated} * b + u' \\] coefficients applied high-frequency, obtain fitted values benchmark: \\[ \\text{fitted.values} = * + * b \\] u smoothed usual: \\[ u = smooth(extrapolation(C_{aggregated} - \\text{fitted.values}_{aggregated})) \\] can done using outliers twoStepsBenchmark function : example, indicator outlier colinear lockdown period, equivalent estimated specific coefficient lockdown period, account follow closely indicator period. resulting account reflects better economic outlook, without contributions smoothed part end 2019 :  variation residual smoothed part much lower :","code":"outlier <- window(turnover_catering-130, c(2020,1), c(2021,12)) outlier[c(1,2, 20:24)] <- 0 plot(outlier) benchmark_out <- twoStepsBenchmark(turnover_catering,consumption_catering,                                      outliers = list(AO2020 = outlier)) coefficients(summary(benchmark_out)) #>              Estimate      StdErr   t.value      p.value #> constant 24179.889019 1540.386318 15.697289 1.038088e-12 #> hfserie     46.720760    1.519744 30.742528 2.598318e-18 #> AO2020       7.964003    2.941739  2.707243 1.356125e-02 plot(in_disaggr(benchmark_out, type =\"contributions\"), start=2018) plot(in_disaggr(benchmark_out, type=\"levels-rebased\"), start=c(2010,1)) par(mfrow=c(1,2)) plot(residuals(benchmark_out)) plot(smoothed.part(benchmark_out))"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr_outlier.html","id":"the-case-without-annual-account","dir":"Articles","previous_headings":"","what":"The case without annual account","title":"Outliers in two-step benchmarks","text":"Let’s go back August 2020 : turnover index known June 2020 annual account 2019. 2020 enter estimation annual residual, smoothing related issue . message indicator clearly attenuated monthly account : indicator April 2020 17 % February level, account April 38 % April level, twice level.  correct , use specification outlier. annual account 2020 yet known, coefficients outlier known, manually specify . One way compute value coefficient enable account follow exactly indicator. drop around 110 points turnover index February April, like 83 % drop account, value 8 000 M€. can compute \\(b\\) : \\[ b = 8000 * 0.83/110- \\approx 14 \\] broad assumption, resulting estimates April 2020 (1574 M€) closer estimates without outlier (3085 M€) final estimates using annual accounts 2020 2021 outliers (2161 M€). value \\(b\\) (14) far final estimated value (8). One anticipated , annual account, total final consumption drop less turnover April, includes government consumption hotels (social assistance policies continued lockdown) excludes collective firms factories restaurants, totally closed lockdown, thus going slighlty lower \\(b\\) coefficient, close final estimate.","code":"turnover_catering_2020 <- window(turnover_catering, end = c(2020,6)) consumption_catering_2020 <- window(consumption_catering, end = 2019) benchmark_2020 <- twoStepsBenchmark(turnover_catering_2020,consumption_catering_2020) coefficients(summary(benchmark_2020)) #>             Estimate      StdErr  t.value      p.value #> constant 24237.70495 1582.064943 15.32030 3.793344e-12 #> hfserie     46.65203    1.564194 29.82496 2.018110e-17 plot(in_disaggr(benchmark_2020, type =\"contributions\"), start=2018) plot(in_disaggr(benchmark_2020), start=c(2010,1)) benchmark_out_2020 <- twoStepsBenchmark(turnover_catering_2020,consumption_catering_2020,                                      outliers = list(AO2020 = outlier),                                     set.coeff = c(AO2020 = 14)                                         ) coefficients(summary(benchmark_out_2020)) #>             Estimate      StdErr  t.value      p.value #> constant 24237.70495 1582.064943 15.32030 3.793344e-12 #> hfserie     46.65203    1.564194 29.82496 2.018110e-17 #> AO2020      14.00000          NA       NA           NA plot(in_disaggr(benchmark_out_2020, type =\"contributions\"), start=2018) plot(in_disaggr(benchmark_out_2020, type=\"levels-rebased\"), start=c(2010,1))"},{"path":"https://inseefr.github.io/disaggR/articles/disaggr_outlier.html","id":"specification-of-the-ouliers","dir":"Articles","previous_headings":"","what":"Specification of the ouliers","title":"Outliers in two-step benchmarks","text":"Outliers need specified complete low-frequency period, one complete year(s) annual monthly quarterly disaggregation one complete quarter(s) quarterly monthly disaggregation. Outliers can additive outliers (AO) level shifts (LS). Additive outliers completed zeroes specified values, level shifts completed 0 specified values last specified values . Outliers specified named list numeric vectors, whose pattern like list(AO2008T2=c(0,0,3,2),LS2002=c(0.1,0.1,0.1,0.1)) : “AO” stands additive outlier “LS” level shift integer follows stands outlier starting year optional integer, preceded letter T, stands low-frequency cycle outlier start. numeric vector values stands disaggregated value outlier length must multiple hf / lf.","code":"AO2020 = c(1,2,1,0) # A one-year AO in 2020, with half the weight in Q2                      # and the rest split between Q1 and Q3   AO2008T2=c(0,0,3) # A one-quarter AO in the second quarter of 2008,                    # which is concentrated in June  LS2010 = c(0,1,2,3) # A level shift that start in Q2 2010 and increase                      # gradually in Q3 and Q4, and remains at its level afterwards"},{"path":"https://inseefr.github.io/disaggR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arnaud Feldmann. Author.            Creator maintener package version 1.0.2 Franck Arnaud. Contributor.            barplot base graphics method mts class Pauline Meinzel. Maintainer. Institut national de la statistique et des études économiques. Copyright holder.            https://www.insee.fr/","code":""},{"path":"https://inseefr.github.io/disaggR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Feldmann (2024). disaggR: Two-Steps Benchmarks Time Series Disaggregation. R package version 1.0.5.2, https://inseefr.github.io/disaggR/.","code":"@Manual{,   title = {disaggR: Two-Steps Benchmarks for Time Series Disaggregation},   author = {Arnaud Feldmann},   year = {2024},   note = {R package version 1.0.5.2},   url = {https://inseefr.github.io/disaggR/}, }"},{"path":"https://inseefr.github.io/disaggR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Two-Steps Benchmarks for Time Series Disaggregation","text":"R package disaggR implementation French Quarterly National Accounts method temporal disaggregation time series. twoStepsBenchmark() threeRuleSmooth() bend time series another one lower frequency.","code":""},{"path":"https://inseefr.github.io/disaggR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Two-Steps Benchmarks for Time Series Disaggregation","text":"can install stable version CRAN. can install development version Github.","code":"install.packages(\"disaggR\") # install.packages(\"devtools\") install_github(\"InseeFr/disaggR\")"},{"path":"https://inseefr.github.io/disaggR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Two-Steps Benchmarks for Time Series Disaggregation","text":"","code":"library(disaggR)  benchmark <- twoStepsBenchmark(hfserie = turnover,                                lfserie = construction,                                include.differenciation = TRUE) as.ts(benchmark) coef(benchmark) summary(benchmark) plot(benchmark) plot(in_sample(benchmark)) plot(in_disaggr(benchmark,type=\"changes\"),      start=c(2015,1),end=c(2020,12)) plot(in_disaggr(benchmark,type=\"contributions\"),      start=c(2015,1),end=c(2020,12)) plot(in_scatter(benchmark))  new_benchmark <- twoStepsBenchmark(hfserie = turnover,                                    lfserie = construction,                                    include.differenciation = FALSE) plot(in_revisions(new_benchmark,                   benchmark),start = c(2010,1))"},{"path":"https://inseefr.github.io/disaggR/index.html","id":"shiny-app","dir":"","previous_headings":"","what":"Shiny app","title":"Two-Steps Benchmarks for Time Series Disaggregation","text":"can also use shiny application reView, easily chose best parameters benchmark.","code":"reView(benchmark)"},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth a time series — bflSmooth","title":"Smooth a time series — bflSmooth","text":"bflSmooth smoothes time series time series higher frequency exactly aggregates higher one. process followed Boot, Feibes Lisman, minimizes squares variations.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth a time series — bflSmooth","text":"","code":"bflSmooth(lfserie, nfrequency, weights = NULL, lfserie.is.rate = FALSE)"},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth a time series — bflSmooth","text":"lfserie time series smoothed nfrequency new high frequency. must multiple low frequency. weights NULL time series size expected high-frequency serie. lfserie..rate TRUE FALSE. taken account weights NULL.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth a time series — bflSmooth","text":"time series frequency nfrequency","code":""},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth a time series — bflSmooth","text":"weights NULL results depends lfserie..rate : FALSE rate output/weights smoothed constraint aggregated output equal input lfserie. TRUE input lfserie rate smoothed, constraint low-frequency weighted means output equal lfserie.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth_matrices_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating a clone for bflSmooth_matrices_impl — bflSmooth_matrices_factory","title":"Generating a clone for bflSmooth_matrices_impl — bflSmooth_matrices_factory","text":"function factory returns clone bflSmooth_matrices_impl gives results original function uses cache store computed matrices, useful making large number similar calls, like calls threeRuleSmooth() hfserie different lfserie, twoStepsBenchmark() different lfserie length.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth_matrices_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating a clone for bflSmooth_matrices_impl — bflSmooth_matrices_factory","text":"","code":"bflSmooth_matrices_factory(cache_size = 100L)"},{"path":"https://inseefr.github.io/disaggR/reference/bflSmooth_matrices_factory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating a clone for bflSmooth_matrices_impl — bflSmooth_matrices_factory","text":"bflSmooth_matrices_factory run build time.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/construction.html","id":null,"dir":"Reference","previous_headings":"","what":"Total GFCF in construction at current prices — construction","title":"Total GFCF in construction at current prices — construction","text":"annual time series containing french GFCF construction 2000 2019, retrieved 08/12/2020.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total GFCF in construction at current prices — construction","text":"","code":"construction"},{"path":"https://inseefr.github.io/disaggR/reference/construction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Total GFCF in construction at current prices — construction","text":"time series frequency 1","code":""},{"path":"https://inseefr.github.io/disaggR/reference/construction.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Total GFCF in construction at current prices — construction","text":"https://www.insee.fr/fr/statistiques/2015361","code":""},{"path":"https://inseefr.github.io/disaggR/reference/consumption_catering.html","id":null,"dir":"Reference","previous_headings":"","what":"Total consumption in accommodation and food services at current prices — consumption_catering","title":"Total consumption in accommodation and food services at current prices — consumption_catering","text":"annual time series containing consumption accommodation food services services 1999 2021, retrieved 04/07/2022.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/consumption_catering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total consumption in accommodation and food services at current prices — consumption_catering","text":"","code":"consumption_catering"},{"path":"https://inseefr.github.io/disaggR/reference/consumption_catering.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Total consumption in accommodation and food services at current prices — consumption_catering","text":"time series frequency 1","code":""},{"path":"https://inseefr.github.io/disaggR/reference/consumption_catering.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Total consumption in accommodation and food services at current prices — consumption_catering","text":"https://www.insee.fr/en/statistiques/serie/010548586","code":""},{"path":"https://inseefr.github.io/disaggR/reference/default_col_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Default color palette — default_col_pal","title":"Default color palette — default_col_pal","text":"default color palette graphics, inspired package scales whose scales can also used alternatives.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/default_col_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default color palette — default_col_pal","text":"","code":"default_col_pal(object)"},{"path":"https://inseefr.github.io/disaggR/reference/default_lty_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Default linetype palette — default_lty_pal","title":"Default linetype palette — default_lty_pal","text":"default linetype palette graphics. palette objects another class \"in_scatter\" taken linetype_pal seen package scales. Hence based set supplied Richard Pearson, University Manchester.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/default_lty_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default linetype palette — default_lty_pal","text":"","code":"default_lty_pal(object)"},{"path":"https://inseefr.github.io/disaggR/reference/default_margins.html","id":null,"dir":"Reference","previous_headings":"","what":"Default margins — default_margins","title":"Default margins — default_margins","text":"default margins graphics.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/default_margins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default margins — default_margins","text":"","code":"default_margins(main, xlab, ylab)"},{"path":"https://inseefr.github.io/disaggR/reference/default_theme_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Default ggplot theme — default_theme_ggplot","title":"Default ggplot theme — default_theme_ggplot","text":"default theme ggplot graphics produced autoplot","code":""},{"path":"https://inseefr.github.io/disaggR/reference/default_theme_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default ggplot theme — default_theme_ggplot","text":"","code":"default_theme_ggplot(object, start, end, show.legend, xlab, ylab, mar)"},{"path":"https://inseefr.github.io/disaggR/reference/disaggR-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual Class ","title":"Virtual Class ","text":"\"disaggR\" class class contained actual disaggregation classes disaggR package. “virtual” class.  disaggR classes minimalist S4 classes, containing disaggR list. allows Ops group generic double dispatch package rather uses S3 methods.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/disaggR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Steps Benchmarks for Time Series Disaggregation — disaggR-package","title":"Two-Steps Benchmarks for Time Series Disaggregation — disaggR-package","text":"twoStepsBenchmark() threeRuleSmooth() functions allow disaggregate low-frequency time series higher frequency time series, using French National Accounts methodology. aggregated sum resulting time series strictly equal low-frequency series within benchmarking window. Typically, low-frequency series annual one, unknown last year, high frequency one either quarterly monthly. See \"Methodology quarterly national accounts\", Insee Méthodes N°126, Insee (2012, ISBN:978-2-11-068613-8, https://www.insee.fr/en/information/2579410).","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/disaggR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two-Steps Benchmarks for Time Series Disaggregation — disaggR-package","text":"Maintainer: Thomas Laurent thomas.laurent@insee.fr Authors: Arnaud Feldmann arnaud.feldmann@gmail.com (ORCID) (Author, creator maintener package version 1.0.2) contributors: Franck Arnaud (barplot base graphics method mts class) [contributor] Institut national de la statistique et des études économiques comptes-trimestriels@insee.fr (https://www.insee.fr/) [copyright holder]","code":""},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance computation for disaggregations — distance","title":"Distance computation for disaggregations — distance","text":"function distance computes Minkowski distance exponent p, related tscomparison object, produced in_sample, in_disaggr in_revisions","code":""},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance computation for disaggregations — distance","text":"","code":"distance(x, p = 2)"},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance computation for disaggregations — distance","text":"x object class tscomparison p integer greater 1L, Inf.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance computation for disaggregations — distance","text":"numeric length 1, distance.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance computation for disaggregations — distance","text":"meaning depends tscomparison function : in_sample produce low-frequency distance predicted value response, coefficient calculation window. in_disaggr produce high-frequency distance inputs (eventually, sum contributions) benchmarked series. in_revisions produce high-frequency distance two benchmarked series (contributions distance permitted).","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance computation for disaggregations — distance","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) distance(in_sample(benchmark,type=\"changes\")) #> [1] 1.554383 distance(in_disaggr(benchmark,type=\"contributions\"),p=1L) #> [1] 0.116331 distance(in_disaggr(benchmark,type=\"changes\"),p=Inf) #> [1] 1.936705"},{"path":"https://inseefr.github.io/disaggR/reference/extend_tsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend tsp with lf — extend_tsp","title":"Extend tsp with lf — extend_tsp","text":"window smallest around tsphf compatible low frequency.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/extend_tsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend tsp with lf — extend_tsp","text":"","code":"extend_tsp(tsphf, lffreq)"},{"path":"https://inseefr.github.io/disaggR/reference/extend_tsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend tsp with lf — extend_tsp","text":"tsphf numeric length 3, tsp high-frequency lffreq numeric length 1, low frequency","code":""},{"path":"https://inseefr.github.io/disaggR/reference/extend_tsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend tsp with lf — extend_tsp","text":"numeric length 3, tsp high-frequency.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/hfserie_extrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolation function for the hfserie in a threeRuleSmooth — hfserie_extrap","title":"Extrapolation function for the hfserie in a threeRuleSmooth — hfserie_extrap","text":"function replaces incomplete low frequency cycles, start end hfserie, respectively first last complete cycles. may seem raw, used weights bflSmooth, order get high-frequency rate.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/hfserie_extrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolation function for the hfserie in a threeRuleSmooth — hfserie_extrap","text":"","code":"hfserie_extrap(hfserie, lffreq)"},{"path":"https://inseefr.github.io/disaggR/reference/hfserie_extrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolation function for the hfserie in a threeRuleSmooth — hfserie_extrap","text":"hfserie time series, high frequency series extrapolate lffreq integer length 1. low frequency","code":""},{"path":"https://inseefr.github.io/disaggR/reference/hfserie_extrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extrapolation function for the hfserie in a threeRuleSmooth — hfserie_extrap","text":"time series, extrapolated hfserie","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparing a disaggregation with the high-frequency input — in_disaggr","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"function in_disaggr takes twoStepsBenchmark threeRuleSmooth object input. produces comparison benchmarked time series high-frequency input.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"","code":"in_disaggr(object, type = \"changes\")"},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"object object class \"twoStepsBenchmark\" \"threeRuleSmooth\". type \"levels\",\"levels-rebased\", \"changes\" \"contributions\". defines type output.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"named matrix time series two columns, one response input. tscomparison class added object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"functions plot autoplot can used object produce graphics.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/in_disaggr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparing a disaggregation with the high-frequency input — in_disaggr","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) plot(in_disaggr(benchmark))"},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparing two disaggregations together — in_revisions","title":"Comparing two disaggregations together — in_revisions","text":"function in_revisionstakes two inputs, twoStepsBenchmark threeRuleSmooth, produces comparison .","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparing two disaggregations together — in_revisions","text":"","code":"in_revisions(object, object_old, type = \"changes\")"},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparing two disaggregations together — in_revisions","text":"object object class \"twoStepsBenchmark\" \"threeRuleSmooth\". object_old object class \"twoStepsBenchmark\" \"threeRuleSmooth\". type \"levels\",\"levels-rebased\", \"changes\" \"contributions\". defines type output.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparing two disaggregations together — in_revisions","text":"named matrix time series two columns, one response predicted value. tscomparison class added object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparing two disaggregations together — in_revisions","text":"functions plot autoplot can used object produce graphics.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/in_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparing two disaggregations together — in_revisions","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) benchmark2 <- twoStepsBenchmark(turnover,construction,include.differenciation = TRUE) plot(in_revisions(benchmark,benchmark2))"},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Producing the in sample predictions of a prais-lm regression — in_sample","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"function in_sample returns -sample predictions praislm twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"","code":"in_sample(object, type = \"changes\")"},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"object object class \"praislm\" \"twoStepsBenchmark\". type \"changes\" \"levels\". results either returned changes levels.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"named matrix time series two columns, one response predicted value. \"tscomparison\" class added object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"functions plot autoplot can used object produce graphics. predicted values different fitted values : eventually reintegrated. contain autocorrelated part residuals. Besides, changes relative latest benchmark value, latest predicted value.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/in_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Producing the in sample predictions of a prais-lm regression — in_sample","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) plot(in_sample(benchmark))"},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparing the inputs of a praislm regression — in_scatter","title":"Comparing the inputs of a praislm regression — in_scatter","text":"function in_scatter returns low-frequency comparisons inputs praislm, twoStepsBenchmark threeRuleSmooth.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparing the inputs of a praislm regression — in_scatter","text":"","code":"in_scatter(   object,   type = if (model.list(object)$include.differenciation) \"changes\" else \"levels\" )"},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparing the inputs of a praislm regression — in_scatter","text":"object object class \"praislm\", \"twoStepsBenchmark\" \"threeRuleSmooth\". type \"levels\" \"changes\". defines type output. differencied model scatterplot levels.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparing the inputs of a praislm regression — in_scatter","text":"named matrix time series two three columns, one low-frequency serie others high-frequency series (eventually differentiated include.differenciation TRUE). tscomparison class added object. twoStepsBenchmark object, matrix three columns, low-frequency series, high-frequency regression span high-frequency series benchmark span. outlier effects estimated, contributions outliers substracted low-frequency series.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparing the inputs of a praislm regression — in_scatter","text":"functions plot autoplot can used object produce graphics.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/in_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparing the inputs of a praislm regression — in_scatter","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) plot(in_scatter(benchmark))"},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting all the arguments submitted to generate an object — model.list","title":"Extracting all the arguments submitted to generate an object — model.list","text":"function model.list returns arguments submitted function used generate object class \"twoStepsBenchmark\", \"threeRuleSmooth\" \"praislm\".","code":""},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting all the arguments submitted to generate an object — model.list","text":"","code":"model.list(object)"},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting all the arguments submitted to generate an object — model.list","text":"object object class \"twoStepsBenchmark\", \"threeRuleSmooth\" \"praislm\".","code":""},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting all the arguments submitted to generate an object — model.list","text":"list containing every evaluated arguments","code":""},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting all the arguments submitted to generate an object — model.list","text":"returned evaluation, model.list return call.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/model.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting all the arguments submitted to generate an object — model.list","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction); model.list(benchmark) #> $hfserie #>            constant   hfserie #> Jan 2000 0.08333333  52.95220 #> Feb 2000 0.08333333  52.23017 #> Mar 2000 0.08333333  53.90119 #> Apr 2000 0.08333333  54.46341 #> May 2000 0.08333333  55.18790 #> Jun 2000 0.08333333  55.47950 #> Jul 2000 0.08333333  57.00284 #> Aug 2000 0.08333333  56.85169 #> Sep 2000 0.08333333  57.33163 #> Oct 2000 0.08333333  57.80456 #> Nov 2000 0.08333333  58.05515 #> Dec 2000 0.08333333  59.70457 #> Jan 2001 0.08333333  59.60711 #> Feb 2001 0.08333333  60.82968 #> Mar 2001 0.08333333  60.79504 #> Apr 2001 0.08333333  60.64843 #> May 2001 0.08333333  61.22578 #> Jun 2001 0.08333333  61.33095 #> Jul 2001 0.08333333  60.32609 #> Aug 2001 0.08333333  62.70687 #> Sep 2001 0.08333333  61.04050 #> Oct 2001 0.08333333  63.25204 #> Nov 2001 0.08333333  63.03554 #> Dec 2001 0.08333333  63.68417 #> Jan 2002 0.08333333  62.95983 #> Feb 2002 0.08333333  62.74072 #> Mar 2002 0.08333333  62.93436 #> Apr 2002 0.08333333  64.92714 #> May 2002 0.08333333  64.63393 #> Jun 2002 0.08333333  64.38931 #> Jul 2002 0.08333333  64.31761 #> Aug 2002 0.08333333  65.38775 #> Sep 2002 0.08333333  65.54656 #> Oct 2002 0.08333333  66.19863 #> Nov 2002 0.08333333  64.79341 #> Dec 2002 0.08333333  65.32345 #> Jan 2003 0.08333333  65.91953 #> Feb 2003 0.08333333  66.96147 #> Mar 2003 0.08333333  66.95276 #> Apr 2003 0.08333333  67.02189 #> May 2003 0.08333333  65.94428 #> Jun 2003 0.08333333  67.71240 #> Jul 2003 0.08333333  67.92858 #> Aug 2003 0.08333333  69.34735 #> Sep 2003 0.08333333  68.82502 #> Oct 2003 0.08333333  69.64556 #> Nov 2003 0.08333333  69.56173 #> Dec 2003 0.08333333  70.20201 #> Jan 2004 0.08333333  71.62133 #> Feb 2004 0.08333333  71.60853 #> Mar 2004 0.08333333  71.43942 #> Apr 2004 0.08333333  72.86131 #> May 2004 0.08333333  72.63120 #> Jun 2004 0.08333333  72.66541 #> Jul 2004 0.08333333  73.45298 #> Aug 2004 0.08333333  72.14682 #> Sep 2004 0.08333333  74.14137 #> Oct 2004 0.08333333  74.75602 #> Nov 2004 0.08333333  75.01225 #> Dec 2004 0.08333333  75.16693 #> Jan 2005 0.08333333  74.78895 #> Feb 2005 0.08333333  75.03312 #> Mar 2005 0.08333333  75.46066 #> Apr 2005 0.08333333  76.25605 #> May 2005 0.08333333  76.12112 #> Jun 2005 0.08333333  76.67231 #> Jul 2005 0.08333333  78.49390 #> Aug 2005 0.08333333  78.99697 #> Sep 2005 0.08333333  79.85180 #> Oct 2005 0.08333333  79.72473 #> Nov 2005 0.08333333  81.93822 #> Dec 2005 0.08333333  80.16945 #> Jan 2006 0.08333333  81.32016 #> Feb 2006 0.08333333  82.35133 #> Mar 2006 0.08333333  83.63386 #> Apr 2006 0.08333333  83.63608 #> May 2006 0.08333333  85.69523 #> Jun 2006 0.08333333  86.73240 #> Jul 2006 0.08333333  87.57389 #> Aug 2006 0.08333333  87.21008 #> Sep 2006 0.08333333  88.40514 #> Oct 2006 0.08333333  88.04695 #> Nov 2006 0.08333333  89.63659 #> Dec 2006 0.08333333  91.92662 #> Jan 2007 0.08333333  92.63169 #> Feb 2007 0.08333333  93.73279 #> Mar 2007 0.08333333  94.27983 #> Apr 2007 0.08333333  93.66900 #> May 2007 0.08333333  96.34922 #> Jun 2007 0.08333333  96.29693 #> Jul 2007 0.08333333  96.11316 #> Aug 2007 0.08333333  96.19652 #> Sep 2007 0.08333333  96.89635 #> Oct 2007 0.08333333  97.79498 #> Nov 2007 0.08333333  96.19817 #> Dec 2007 0.08333333  98.43091 #> Jan 2008 0.08333333 101.61886 #> Feb 2008 0.08333333 102.38942 #> Mar 2008 0.08333333 105.01997 #> Apr 2008 0.08333333 102.78853 #> May 2008 0.08333333 101.60734 #> Jun 2008 0.08333333 103.35920 #> Jul 2008 0.08333333 103.23944 #> Aug 2008 0.08333333 104.01456 #> Sep 2008 0.08333333 102.98514 #> Oct 2008 0.08333333 103.56430 #> Nov 2008 0.08333333 100.20945 #> Dec 2008 0.08333333 100.93351 #> Jan 2009 0.08333333  99.10659 #> Feb 2009 0.08333333  98.94825 #> Mar 2009 0.08333333  98.60390 #> Apr 2009 0.08333333  98.76337 #> May 2009 0.08333333  97.40919 #> Jun 2009 0.08333333  97.63918 #> Jul 2009 0.08333333  98.02665 #> Aug 2009 0.08333333  96.94162 #> Sep 2009 0.08333333  96.01264 #> Oct 2009 0.08333333  96.65990 #> Nov 2009 0.08333333  96.21037 #> Dec 2009 0.08333333  97.86338 #> Jan 2010 0.08333333  95.96627 #> Feb 2010 0.08333333  94.16255 #> Mar 2010 0.08333333  93.94231 #> Apr 2010 0.08333333  94.30199 #> May 2010 0.08333333  95.66035 #> Jun 2010 0.08333333  96.64727 #> Jul 2010 0.08333333  97.35644 #> Aug 2010 0.08333333  96.81579 #> Sep 2010 0.08333333  98.92692 #> Oct 2010 0.08333333  98.26915 #> Nov 2010 0.08333333 100.43624 #> Dec 2010 0.08333333  99.46794 #> Jan 2011 0.08333333 100.06816 #> Feb 2011 0.08333333 100.29381 #> Mar 2011 0.08333333 101.21072 #> Apr 2011 0.08333333 101.59274 #> May 2011 0.08333333 102.60177 #> Jun 2011 0.08333333 101.83867 #> Jul 2011 0.08333333 104.77932 #> Aug 2011 0.08333333 101.99032 #> Sep 2011 0.08333333 102.77701 #> Oct 2011 0.08333333 102.74454 #> Nov 2011 0.08333333 105.62406 #> Dec 2011 0.08333333 105.89324 #> Jan 2012 0.08333333 104.25699 #> Feb 2012 0.08333333 102.88971 #> Mar 2012 0.08333333 104.90658 #> Apr 2012 0.08333333 104.73297 #> May 2012 0.08333333 105.38963 #> Jun 2012 0.08333333 104.45144 #> Jul 2012 0.08333333 106.44087 #> Aug 2012 0.08333333 104.55779 #> Sep 2012 0.08333333 103.91388 #> Oct 2012 0.08333333 104.87647 #> Nov 2012 0.08333333 103.07460 #> Dec 2012 0.08333333 103.09632 #> Jan 2013 0.08333333 104.99670 #> Feb 2013 0.08333333 103.41157 #> Mar 2013 0.08333333 100.96894 #> Apr 2013 0.08333333 104.85869 #> May 2013 0.08333333 104.69964 #> Jun 2013 0.08333333 103.81736 #> Jul 2013 0.08333333 105.36523 #> Aug 2013 0.08333333 105.82866 #> Sep 2013 0.08333333 104.66512 #> Oct 2013 0.08333333 103.93619 #> Nov 2013 0.08333333 106.27217 #> Dec 2013 0.08333333 107.68245 #> Jan 2014 0.08333333 101.52057 #> Feb 2014 0.08333333 103.54678 #> Mar 2014 0.08333333 103.19782 #> Apr 2014 0.08333333 102.40583 #> May 2014 0.08333333 100.65119 #> Jun 2014 0.08333333 103.75838 #> Jul 2014 0.08333333 101.13113 #> Aug 2014 0.08333333 104.51738 #> Sep 2014 0.08333333 101.90654 #> Oct 2014 0.08333333 101.48923 #> Nov 2014 0.08333333  99.86480 #> Dec 2014 0.08333333 101.33127 #> Jan 2015 0.08333333 100.13741 #> Feb 2015 0.08333333 100.08938 #> Mar 2015 0.08333333 100.17402 #> Apr 2015 0.08333333  99.86940 #> May 2015 0.08333333  98.00527 #> Jun 2015 0.08333333 100.67095 #> Jul 2015 0.08333333 100.16710 #> Aug 2015 0.08333333  99.65097 #> Sep 2015 0.08333333  99.56027 #> Oct 2015 0.08333333 100.34261 #> Nov 2015 0.08333333 101.35284 #> Dec 2015 0.08333333  99.97979 #> Jan 2016 0.08333333  99.31158 #> Feb 2016 0.08333333 100.97860 #> Mar 2016 0.08333333  99.01797 #> Apr 2016 0.08333333  98.35013 #> May 2016 0.08333333 100.73473 #> Jun 2016 0.08333333  98.38691 #> Jul 2016 0.08333333  98.68740 #> Aug 2016 0.08333333  98.90801 #> Sep 2016 0.08333333 101.66512 #> Oct 2016 0.08333333 101.01954 #> Nov 2016 0.08333333 102.88054 #> Dec 2016 0.08333333 101.81342 #> Jan 2017 0.08333333 102.81422 #> Feb 2017 0.08333333 104.23883 #> Mar 2017 0.08333333 107.09768 #> Apr 2017 0.08333333 102.40725 #> May 2017 0.08333333 109.29157 #> Jun 2017 0.08333333 111.01618 #> Jul 2017 0.08333333 108.47322 #> Aug 2017 0.08333333 106.92717 #> Sep 2017 0.08333333 108.17751 #> Oct 2017 0.08333333 108.29035 #> Nov 2017 0.08333333 109.25391 #> Dec 2017 0.08333333 112.38608 #> Jan 2018 0.08333333 111.59429 #> Feb 2018 0.08333333 111.82158 #> Mar 2018 0.08333333 107.70471 #> Apr 2018 0.08333333 112.34397 #> May 2018 0.08333333 109.13911 #> Jun 2018 0.08333333 113.29352 #> Jul 2018 0.08333333 111.02063 #> Aug 2018 0.08333333 114.74015 #> Sep 2018 0.08333333 112.98397 #> Oct 2018 0.08333333 116.52727 #> Nov 2018 0.08333333 115.37020 #> Dec 2018 0.08333333 117.24465 #> Jan 2019 0.08333333 117.52315 #> Feb 2019 0.08333333 119.36003 #> Mar 2019 0.08333333 122.41181 #> Apr 2019 0.08333333 122.62517 #> May 2019 0.08333333 122.72672 #> Jun 2019 0.08333333 119.75711 #> Jul 2019 0.08333333 120.04214 #> Aug 2019 0.08333333 127.11451 #> Sep 2019 0.08333333 123.72686 #> Oct 2019 0.08333333 122.93404 #> Nov 2019 0.08333333 123.35912 #> Dec 2019 0.08333333 122.75935 #> Jan 2020 0.08333333 123.39553 #> Feb 2020 0.08333333 118.66687 #> Mar 2020 0.08333333 112.93565 #> Apr 2020 0.08333333  97.90891 #> May 2020 0.08333333  89.94552 #>  #> $lfserie #> Time Series: #> Start = 2000  #> End = 2019  #> Frequency = 1  #>  [1] 138.4 143.9 147.3 155.9 169.3 181.4 199.2 216.7 227.0 211.8 210.1 220.5 #> [13] 219.9 220.1 216.3 208.5 209.0 221.6 231.3 245.1 #>  #> $include.rho #> [1] FALSE #>  #> $include.differenciation #> [1] FALSE #>  #> $set.coefficients #> numeric(0) #>  #> $start.coeff.calc #> NULL #>  #> $end.coeff.calc #> NULL #>  #> $start.benchmark #> NULL #>  #> $end.benchmark #> NULL #>  #> $start.domain #> NULL #>  #> $end.domain #> NULL #>"},{"path":"https://inseefr.github.io/disaggR/reference/outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the standard error — outliers","title":"Extracting the standard error — outliers","text":"function outliers returns outliers either praislm twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the standard error — outliers","text":"","code":"outliers(object, as.ts = FALSE)"},{"path":"https://inseefr.github.io/disaggR/reference/outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the standard error — outliers","text":"object praislm twoStepsBenchmark object. .ts boolean length 1. TRUE, returned outliers returned time series (dim colnames). FALSE, returned outliers named list submitted function argument.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting the standard error — outliers","text":"named list time series, depending argument \".ts\".","code":""},{"path":"https://inseefr.github.io/disaggR/reference/plot.tscomparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting disaggR objects — plot.twoStepsBenchmark","title":"Plotting disaggR objects — plot.twoStepsBenchmark","text":"Plot methods objects class \"tscomparison\", threeRuleSmooth twoStepsBenchmark. : plot draws plot base graphics autoplot produces ggplot object Objects class tscomparison can produced functions in_sample, in_scatter, in_revisions, in_disaggr.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/plot.tscomparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting disaggR objects — plot.twoStepsBenchmark","text":"","code":"# S3 method for twoStepsBenchmark plot(   x,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(x),   lty = default_lty_pal(x),   show.legend = TRUE,   main = NULL,   mar = default_margins(main, xlab, ylab),   ... )  # S3 method for threeRuleSmooth plot(   x,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(x),   lty = default_lty_pal(x),   show.legend = TRUE,   main = NULL,   mar = default_margins(main, xlab, ylab),   ... )  # S3 method for tscomparison plot(   x,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(x),   lty = default_lty_pal(x),   show.legend = TRUE,   main = NULL,   mar = default_margins(main, xlab, ylab),   ... )  autoplot.twoStepsBenchmark(   object,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(object),   lty = default_lty_pal(object),   show.legend = TRUE,   main = NULL,   mar = NULL,   theme = default_theme_ggplot(object, start, end, show.legend, xlab, ylab, mar),   ... )  autoplot.threeRuleSmooth(   object,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(object),   lty = default_lty_pal(object),   show.legend = TRUE,   main = NULL,   mar = NULL,   theme = default_theme_ggplot(object, start, end, show.legend, xlab, ylab, mar),   ... )  autoplot.tscomparison(   object,   xlab = NULL,   ylab = NULL,   start = NULL,   end = NULL,   col = default_col_pal(object),   lty = default_lty_pal(object),   show.legend = TRUE,   main = NULL,   mar = NULL,   theme = default_theme_ggplot(object, start, end, show.legend, xlab, ylab, mar),   ... )"},{"path":"https://inseefr.github.io/disaggR/reference/plot.tscomparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting disaggR objects — plot.twoStepsBenchmark","text":"x (plot method) tscomparison, twoStepsBenchmark threeRuleSmooth. xlab title x axis ylab title y axis start numeric length 1 2. start plot. end numeric length 1 2. end plot. col color scale applied plot. vector colors, function n color vector size n. lty linetype scales applied plot. vector linetypes, function n linetypes vector size n. show.legend TRUE FALSE. automatic legend added plot. main character length 1, title plot mar numeric length 4, margins plot specified form c(bottom, left, top, right). ... arguments passed either ggplot plot object (autoplot method) tscomparison, twoStepsBenchmark threeRuleSmooth. theme ggplot theme object replace default one (autoplot methods)","code":""},{"path":"https://inseefr.github.io/disaggR/reference/plot.tscomparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting disaggR objects — plot.twoStepsBenchmark","text":"NULL plot methods, ggplot object autoplot methods","code":""},{"path":"https://inseefr.github.io/disaggR/reference/plot.tscomparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting disaggR objects — plot.twoStepsBenchmark","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE) plot(benchmark)  plot(in_sample(benchmark)) if(require(\"ggplot2\")) {   autoplot(in_disaggr(benchmark,type=\"changes\"),            start=c(2015,1),            end=c(2020,12)) } #> Loading required package: ggplot2   plot(in_scatter(benchmark),xlab=\"title x\",ylab=\"title y\")"},{"path":"https://inseefr.github.io/disaggR/reference/prais.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the regression of a twoStepsBenchmark — prais","title":"Extracting the regression of a twoStepsBenchmark — prais","text":"prais extracts regression, object class \"praislm\", twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/prais.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the regression of a twoStepsBenchmark — prais","text":"","code":"prais(x)  praislm(X, y, include.rho, include.differenciation, set_coefficients, cl)"},{"path":"https://inseefr.github.io/disaggR/reference/prais.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the regression of a twoStepsBenchmark — prais","text":"x twoStepsBenchmark","code":""},{"path":"https://inseefr.github.io/disaggR/reference/prais.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting the regression of a twoStepsBenchmark — prais","text":"prais returns object class \"praislm\". functions can used class almost class twoStepsBenchmark. summary, coefficients, residuals return values. However, fitted.values, accessor returns fitted values regression, high-frequency, eventually integrated, time series contained twoStepsBenchmark. object class \"praislm\" list containing following components : coefficients named vector coefficients. residuals residuals, response minus fitted values. fitted.values time series, fitted mean values se named vector standard errors. df.residuals residual degrees freedom. rho autocorrelation coefficients residuals. equal zero twoStepsBenchmark called include.rho=FALSE residuals.decorrelated residuals model transformed rho least square model. fitted.values.decorrelated fitted values model transformed rho least square model.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/prais.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting the regression of a twoStepsBenchmark — prais","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction); prais(benchmark) #>  #> Call: #> twoStepsBenchmark(hfserie = turnover, lfserie = construction) #>  #> Coefficients: #> constant   hfserie   #>   44.282     0.141   #>"},{"path":"https://inseefr.github.io/disaggR/reference/rePort.html","id":null,"dir":"Reference","previous_headings":"","what":"Producing a report — rePort","title":"Producing a report — rePort","text":"function takes output reView shiny application produces html report outputs shiny.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rePort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Producing a report — rePort","text":"","code":"rePort(   object,   output_file = NULL,   launch.browser = if (is.null(output_file)) TRUE else FALSE,   hfserie_name = NULL,   lfserie_name = NULL,   ... )"},{"path":"https://inseefr.github.io/disaggR/reference/rePort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Producing a report — rePort","text":"object twoStepsBenchmark univariate hfserie, reViewOutput, character length 1 path RDS file. reViewOutput chosen, former new benchmark taken old one. output_file file html saved. NULL file temporary, opened tab default browser. launch.browser TRUE FALSE. TRUE, output opened browser. Defaults TRUE output_file NULL. hfserie_name language object character length 1. name hfserie, eventually expression. lfserie_name language object character length 1. name lfserie, eventually expression. ... arguments passed rmarkdown::render","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rePort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Producing a report — rePort","text":"can also directly take twoStepsBenchmark input.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Using an estimated benchmark model on another time series — reUseBenchmark","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"function reapplies coefficients parameters benchmark new time series.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"","code":"reUseBenchmark(hfserie,benchmark,reeval.smoothed.part=FALSE)"},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"hfserie bended time series. matrix time series, column names hfserie used benchmark. benchmark twoStepsBenchmark object, parameters coefficients taken. reeval.smoothed.part boolean length 1. TRUE, smoothed part reevaluated, hence aggregated benchmarked series equal low-frequency series.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"reUseBenchmark returns object class twoStepsBenchmark.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"reUseBenchmark primarily meant used series derived previous one, modifications bias estimation otherwise. Working-day adjustment good example. Hence, default, smoothed part first model reevaluated ; aggregated benchmarked series equal low-frequency series.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reUseBenchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Using an estimated benchmark model on another time series — reUseBenchmark","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction)  turnover_modif <- turnover turnover_modif[2] <- turnover[2]+2 benchmark2 <- reUseBenchmark(turnover_modif,benchmark)"},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":null,"dir":"Reference","previous_headings":"","what":"A shiny app to reView and modify twoStepsBenchmarks — reView","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"reView allows user easily access diverse outputs order review benchmark object, made twoStepsBenchmark. hfserie_name lfserie_name define :","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"","code":"reView(object, hfserie_name = NULL, lfserie_name = NULL, compare = TRUE)"},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"object twoStepsBenchmark univariate hfserie, reViewOutput, character length 1 path RDS file. reViewOutput chosen, former new benchmark taken old one. hfserie_name language object character length 1. name hfserie, eventually expression. lfserie_name language object character length 1. name lfserie, eventually expression. compare boolean length 1, tells outputs old benchmark displayed.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"list, class reViewOutput, containing new benchmark, old one, names series boolean compare. object can also saved RDS format app. reViewOutput object can displayed html report informations shiny, rePort method.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"default file name RDS file names series output call element default, set defined call element. app made shiny modules order make easy integrate wider application. module part, every input defined reactive variables.","code":""},{"path":[]},{"path":"https://inseefr.github.io/disaggR/reference/reView.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A shiny app to reView and modify twoStepsBenchmarks — reView","text":"","code":"if (FALSE) { reView(twoStepsBenchmark(turnover,construction)) }"},{"path":"https://inseefr.github.io/disaggR/reference/residuals_extrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolation function for the residuals in a twoStepsBenchmark — residuals_extrap","title":"Extrapolation function for the residuals in a twoStepsBenchmark — residuals_extrap","text":"function rule extrapolate low-frequency residuals. include.differenciation TRUE, u(n+1)-u(n) = rho*(u(n)-u(n-1)) Else u(n+1) = rho * u(n)","code":""},{"path":"https://inseefr.github.io/disaggR/reference/residuals_extrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolation function for the residuals in a twoStepsBenchmark — residuals_extrap","text":"","code":"residuals_extrap(lfresiduals, rho, include.differenciation)"},{"path":"https://inseefr.github.io/disaggR/reference/residuals_extrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolation function for the residuals in a twoStepsBenchmark — residuals_extrap","text":"lfresiduals residuals extrapolate rho autocorrelation parameter regression include.differenciation boolean, submitted twoStepsBenchmark","code":""},{"path":"https://inseefr.github.io/disaggR/reference/residuals_extrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extrapolation function for the residuals in a twoStepsBenchmark — residuals_extrap","text":"numeric, extrapolated sequence residuals, replace NA residuals","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rho.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the autocorrelation parameter — rho","title":"Extracting the autocorrelation parameter — rho","text":"function rho returns autocorrelation parameter either praislm twoStepsBenchmark object. include.rho FALSE, rho returns zero.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the autocorrelation parameter — rho","text":"","code":"rho(object)"},{"path":"https://inseefr.github.io/disaggR/reference/rho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the autocorrelation parameter — rho","text":"object praislm twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting the autocorrelation parameter — rho","text":"double length 1.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/rho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting the autocorrelation parameter — rho","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction,include.rho = TRUE); rho(benchmark) #> [1] 0.8450681"},{"path":"https://inseefr.github.io/disaggR/reference/se.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the standard error — se","title":"Extracting the standard error — se","text":"function se returns standard error coefficients either praislm twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the standard error — se","text":"","code":"se(object)"},{"path":"https://inseefr.github.io/disaggR/reference/se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the standard error — se","text":"object praislm twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting the standard error — se","text":"numeric, named way coefficients . coefficients set user, return NA standard error.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.part.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","title":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","text":"function smoothed.part returns smoothed part twoStepsBenchmark. derives residuals aggregated regression, differences : eventually integrated include.differenciation=TRUE. extrapolated match domain window. smoothed using bflSmooth function.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","text":"","code":"smoothed.part(object)"},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","text":"object twoStepsBenchmark object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","text":"time series","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.part.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting the smoothed part of a twoStepsBenchmark — smoothed.part","text":"","code":"benchmark <- twoStepsBenchmark(turnover,construction); smoothed.part(benchmark) #>               Jan          Feb          Mar          Apr          May #> 2000  0.034928920  0.031715339  0.025288177  0.015647434  0.002793110 #> 2001 -0.215730398 -0.252150717 -0.286428384 -0.318563398 -0.348555759 #> 2002 -0.511359156 -0.521297114 -0.528321890 -0.532433484 -0.533631895 #> 2003 -0.438344634 -0.415030119 -0.390508134 -0.364778680 -0.337841757 #> 2004 -0.078877462 -0.042960969 -0.007724662  0.026831457  0.060707390 #> 2005  0.307228118  0.335359618  0.363188180  0.390713805  0.417936492 #> 2006  0.624812253  0.648440789  0.670898672  0.692185902  0.712302477 #> 2007  0.831091560  0.841016173  0.850114050  0.858385193  0.865829600 #> 2008  0.895622388  0.890227994  0.878608682  0.860764452  0.836695303 #> 2009  0.420045049  0.353357057  0.293849569  0.241522585  0.196376106 #> 2010  0.093702419  0.106089656  0.118566578  0.131133183  0.143789472 #> 2011  0.248268407  0.257112580  0.261427165  0.261212162  0.256467572 #> 2012  0.055445692  0.018031104 -0.015816779 -0.046097957 -0.072812431 #> 2013 -0.158126865 -0.154888239 -0.150230148 -0.144152591 -0.136655570 #> 2014 -0.025578660 -0.012710613 -0.005827260 -0.004928600 -0.010014634 #> 2015 -0.266151889 -0.313220914 -0.354395379 -0.389675283 -0.419060627 #> 2016 -0.441939206 -0.426337784 -0.412906081 -0.401644095 -0.392551827 #> 2017 -0.397923521 -0.403837089 -0.407398751 -0.408608506 -0.407466356 #> 2018 -0.313660534 -0.298749286 -0.288884189 -0.284065243 -0.284292448 #> 2019 -0.467771523 -0.499234124 -0.521562912 -0.534757888 -0.538819052 #> 2020 -0.242491128 -0.179232573 -0.121724796 -0.069967796 -0.023961574 #>               Jun          Jul          Aug          Sep          Oct #> 2000 -0.013274795 -0.032556281 -0.055051348 -0.080759996 -0.109682225 #> 2001 -0.376405468 -0.402112524 -0.425676928 -0.447098679 -0.466377777 #> 2002 -0.531917125 -0.527289173 -0.519748038 -0.509293721 -0.495926223 #> 2003 -0.309697364 -0.280345501 -0.249786168 -0.218019366 -0.185045095 #> 2004  0.093903135  0.126418694  0.158254065  0.189409250  0.219884247 #> 2005  0.444856243  0.471473056  0.497786932  0.523797871  0.549505872 #> 2006  0.731248400  0.749023669  0.765628284  0.781062246  0.795325555 #> 2007  0.872447272  0.878238208  0.883202410  0.887339876  0.890650607 #> 2008  0.806401236  0.769882251  0.727138347  0.678169524  0.622975783 #> 2009  0.158410130  0.127624659  0.104019692  0.087595229  0.078351270 #> 2010  0.156535446  0.169371103  0.182296444  0.195311469  0.208416177 #> 2011  0.247193394  0.233389628  0.215056274  0.192193333  0.164800804 #> 2012 -0.095960201 -0.115541267 -0.131555627 -0.144003284 -0.152884236 #> 2013 -0.127739084 -0.117403133 -0.105647716 -0.092472835 -0.077878489 #> 2014 -0.021085363 -0.038140785 -0.061180901 -0.090205711 -0.125215214 #> 2015 -0.442551411 -0.460147634 -0.471849297 -0.477656399 -0.477568942 #> 2016 -0.385629277 -0.380876444 -0.378293329 -0.377879932 -0.379636253 #> 2017 -0.403972299 -0.398126337 -0.389928468 -0.379378694 -0.366477013 #> 2018 -0.289565804 -0.299885311 -0.315250969 -0.335662778 -0.361120738 #> 2019 -0.533746404 -0.519539944 -0.496199672 -0.463725588 -0.422117691 #> 2020  0.016293870  0.050798537  0.079552426  0.102555537  0.119807870 #>               Nov          Dec #> 2000 -0.141818035 -0.177167426 #> 2001 -0.483514222 -0.498508015 #> 2002 -0.479645542 -0.460451679 #> 2003 -0.150863354 -0.115474143 #> 2004  0.249679058  0.278793682 #> 2005  0.574910936  0.600013063 #> 2006  0.808418210  0.820340212 #> 2007  0.893134602  0.894791863 #> 2008  0.561557124  0.493913546 #> 2009  0.076287815  0.081404865 #> 2010  0.221610570  0.234894646 #> 2011  0.132878688  0.096426984 #> 2012 -0.158198483 -0.159946026 #> 2013 -0.061864678 -0.044431401 #> 2014 -0.166209412 -0.213188304 #> 2015 -0.471586923 -0.459710345 #> 2016 -0.383562291 -0.389658047 #> 2017 -0.351223426 -0.333617933 #> 2018 -0.391624849 -0.427175110 #> 2019 -0.371375982 -0.311500461 #> 2020  0.131309425  0.137060203"},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the rate of a threeRuleSmooth — smoothed.rate","title":"Extracting the rate of a threeRuleSmooth — smoothed.rate","text":"function smoothed.rate returns high-frequency rate threeRuleSmooth object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the rate of a threeRuleSmooth — smoothed.rate","text":"","code":"smoothed.rate(object)"},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the rate of a threeRuleSmooth — smoothed.rate","text":"object threeRuleSmooth object.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/smoothed.rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting the rate of a threeRuleSmooth — smoothed.rate","text":"","code":"benchmark <- threeRuleSmooth(turnover,construction); smoothed.rate(benchmark) #>            Jan       Feb       Mar       Apr       May       Jun       Jul #> 2000 0.2089845 0.2088765 0.2086620 0.2083375 0.2079020 0.2073539 0.2066926 #> 2001 0.2002677 0.1989885 0.1978003 0.1967032 0.1956968 0.1947822 0.1939593 #> 2002 0.1909675 0.1907360 0.1905357 0.1903667 0.1902300 0.1901254 0.1900528 #> 2003 0.1902979 0.1904229 0.1905508 0.1906817 0.1908155 0.1909522 0.1910918 #> 2004 0.1919930 0.1921534 0.1923164 0.1924821 0.1926505 0.1928215 0.1929951 #> 2005 0.1940938 0.1942501 0.1943725 0.1944608 0.1945148 0.1945344 0.1945195 #> 2006 0.1936774 0.1934411 0.1931995 0.1929524 0.1927000 0.1924420 0.1921784 #> 2007 0.1904773 0.1901729 0.1898622 0.1895450 0.1892214 0.1888912 0.1885544 #> 2008 0.1863953 0.1860173 0.1856379 0.1852569 0.1848745 0.1844905 0.1841051 #> 2009 0.1817609 0.1814127 0.1811105 0.1808542 0.1806439 0.1804789 0.1803594 #> 2010 0.1805908 0.1807165 0.1808171 0.1808926 0.1809430 0.1809678 0.1809668 #> 2011 0.1804117 0.1802338 0.1800368 0.1798204 0.1795845 0.1793291 0.1790541 #> 2012 0.1769884 0.1766250 0.1762921 0.1759901 0.1757192 0.1754795 0.1752707 #> 2013 0.1746691 0.1746720 0.1747010 0.1747554 0.1748362 0.1749434 0.1750768 #> 2014 0.1764345 0.1766642 0.1768293 0.1769300 0.1769667 0.1769407 0.1768498 #> 2015 0.1749676 0.1745538 0.1741978 0.1738998 0.1736595 0.1734759 0.1733505 #> 2016 0.1738131 0.1739884 0.1741161 0.1741972 0.1742318 0.1742189 0.1741597 #> 2017 0.1728121 0.1725013 0.1722248 0.1719834 0.1717756 0.1716037 0.1714682 #> 2018 0.1714015 0.1714397 0.1714370 0.1713948 0.1713116 0.1711884 0.1710238 #> 2019 0.1691620 0.1687669 0.1683934 0.1680419 0.1677126 0.1674054 0.1671199 #> 2020 0.1658735 0.1657337 0.1656062 0.1654914 0.1653894 0.1653001 0.1652233 #>            Aug       Sep       Oct       Nov       Dec #> 2000 0.2059151 0.2050216 0.2040112 0.2028829 0.2016362 #> 2001 0.1932268 0.1925882 0.1920410 0.1915884 0.1912303 #> 2002 0.1900123 0.1900042 0.1900287 0.1900861 0.1901758 #> 2003 0.1912344 0.1913801 0.1915287 0.1916804 0.1918351 #> 2004 0.1931715 0.1933505 0.1935322 0.1937167 0.1939039 #> 2005 0.1944692 0.1943832 0.1942612 0.1941033 0.1939084 #> 2006 0.1919092 0.1916343 0.1913537 0.1910674 0.1907753 #> 2007 0.1882111 0.1878612 0.1875047 0.1871415 0.1867718 #> 2008 0.1837181 0.1833297 0.1829397 0.1825482 0.1821553 #> 2009 0.1802856 0.1802568 0.1802728 0.1803337 0.1804395 #> 2010 0.1809399 0.1808871 0.1808080 0.1807026 0.1805704 #> 2011 0.1787592 0.1784447 0.1781105 0.1777567 0.1773827 #> 2012 0.1750934 0.1749470 0.1748314 0.1747468 0.1746927 #> 2013 0.1752367 0.1754233 0.1756363 0.1758755 0.1761414 #> 2014 0.1766959 0.1764767 0.1761939 0.1758478 0.1754393 #> 2015 0.1732831 0.1732732 0.1733209 0.1734266 0.1735910 #> 2016 0.1740539 0.1739015 0.1737011 0.1734531 0.1731566 #> 2017 0.1713683 0.1713035 0.1712742 0.1712804 0.1713226 #> 2018 0.1708186 0.1705713 0.1702828 0.1699516 0.1695783 #> 2019 0.1668559 0.1666150 0.1663963 0.1661998 0.1660256 #> 2020 0.1651589 0.1651078 0.1650694 0.1650439 0.1650311"},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"threeRuleSmooth bends time series time series lower frequency. procedure involved proportional Denton benchmark. Therefore, resulting time series product high frequency input smoothed rate. latter extrapolated arithmetic sequence. resulting time series equal low-frequency series aggregation within benchmark window.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"","code":"threeRuleSmooth(   hfserie,   lfserie,   start.benchmark = NULL,   end.benchmark = NULL,   start.domain = NULL,   end.domain = NULL,   start.delta.rate = NULL,   end.delta.rate = NULL,   set.delta.rate = NULL,   ... )"},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"hfserie bended time series. can matrix time series. lfserie time series whose frequency divides frequency hfserie. start.benchmark optional start lfserie bend hfserie. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. end.benchmark optional end lfserie bend hfserie. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. start.domain optional start output high-frequency series. also defines smoothing window : low-frequency residuals extrapolated contain smallest low-frequency window around high-frequency domain window. numeric length 1 2, like window hfserie. NULL, start defined hfserie's window. end.domain optional end output high-frequency series. also defines smoothing window : low-frequency residuals extrapolated contain smallest low-frequency window around high-frequency domain window. start.delta.rate optional start mean rate difference. required common difference arithmetical extrapolation rate. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. end.delta.rate optional end mean rate difference. required common difference arithmetical extrapolation rate. numeric length 1 2, like window lfserie. NULL, end defined lfserie's window. set.delta.rate optional double, allows user set delta mean instead using mean. ... dots contain cl item, value overwrites value returned call. feature allows build wrappers.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"threeRuleSmooth returns object class \"threeRuleSmooth\". functions plot autoplot (generic ggplot2) produce graphics benchmarked series bending series. functions in_disaggr, in_revisions, in_scatter produce various comparisons plot autoplot can also used. generic accessor functions .ts, model.list, smoothed.rate extract various useful features returned value. object class \"threeRuleSmooth\" list containing following components : benchmarked.serie time series, result benchmark. lfrate time series, low-frequency rate threeRuleSmooth. smoothed.rate smoothed rate threeRuleSmooth. hfserie..weights modified extrapolated hfserie (see details). delta.rate low-frequency delta rate, used extrapolate low-frequenccy rate time series. estimated mean value specified window. model.list list containing arguments submitted function. call matched call.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"order smooth rate, threeRuleSmooth calls bflSmooth uses modified extrapolated version hfserie weights : full cycles kept first last full cycles replicated respectively backwards forwards fill domain window.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/threeRuleSmooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bends a time series with a lower frequency one by smoothing their rate — threeRuleSmooth","text":"","code":"## How to use threeRuleSmooth  smooth <- threeRuleSmooth(hfserie = turnover,                           lfserie = construction) as.ts(smooth) #>           Jan      Feb      Mar      Apr      May      Jun      Jul      Aug #> 2000 11.06619 10.90966 11.24713 11.34677 11.47367 11.50389 11.78207 11.70662 #> 2001 11.93738 12.10440 12.02528 11.92974 11.98169 11.94617 11.70081 12.11665 #> 2002 12.02328 11.96692 11.99124 12.35997 12.29531 12.24204 12.22374 12.42447 #> 2003 12.54435 12.75100 12.75790 12.77985 12.58319 12.92983 12.98059 13.26160 #> 2004 13.75079 13.75982 13.73898 14.02450 13.99243 14.01145 14.17607 13.93671 #> 2005 14.51607 14.57519 14.66748 14.82881 14.80669 14.91541 15.26859 15.36247 #> 2006 15.74988 15.93013 16.15802 16.13779 16.51347 16.69096 16.82981 16.73642 #> 2007 17.64423 17.82544 17.90017 17.75449 18.23133 18.18964 18.12256 18.10525 #> 2008 18.94128 19.04621 19.49569 19.04229 18.78460 19.06879 19.00690 19.10936 #> 2009 18.01370 17.95046 17.85820 17.86177 17.59637 17.62181 17.68003 17.47717 #> 2010 17.33063 17.01673 16.98637 17.05853 17.30907 17.49004 17.61829 17.51784 #> 2011 18.05347 18.07634 18.22165 18.26845 18.42569 18.26263 18.76117 18.23170 #> 2012 18.45228 18.17290 18.49420 18.43197 18.51898 18.32909 18.65596 18.30737 #> 2013 18.33968 18.06311 17.63937 18.32462 18.30529 18.16217 18.44701 18.54507 #> 2014 17.91173 18.29301 18.24840 18.11866 17.81191 18.35908 17.88502 18.46779 #> 2015 17.52080 17.47098 17.45010 17.36727 17.01955 17.46399 17.36402 17.26782 #> 2016 17.26166 17.56911 17.24063 17.13231 17.55119 17.14086 17.18737 17.21532 #> 2017 17.76754 17.98134 18.44488 17.61235 18.77362 19.05078 18.59970 18.32393 #> 2018 19.12743 19.17066 18.46457 19.25517 18.69679 19.39454 18.98717 19.59975 #> 2019 19.88045 20.14402 20.61334 20.60617 20.58282 20.04799 20.06142 21.20981 #> 2020 20.46805 19.66710 18.70284 16.20309 14.87604                            #>           Sep      Oct      Nov      Dec #> 2000 11.75422 11.79278 11.77840 12.03860 #> 2001 11.75568 12.14698 12.07688 12.17834 #> 2002 12.45412 12.57964 12.31633 12.42294 #> 2003 13.17174 13.33912 13.33362 13.46721 #> 2004 14.33527 14.46770 14.53112 14.57516 #> 2005 15.52185 15.48743 15.90448 15.54553 #> 2006 16.94146 16.84811 17.12663 17.53733 #> 2007 18.20307 18.33702 18.00267 18.38412 #> 2008 18.88023 18.94602 18.29306 18.38557 #> 2009 17.30693 17.42515 17.34998 17.65842 #> 2010 17.89461 17.76785 18.14909 17.96097 #> 2011 18.34001 18.29988 18.77538 18.78363 #> 2012 18.17942 18.33570 18.01195 18.01018 #> 2013 18.36070 18.25497 18.69067 18.96734 #> 2014 17.98413 17.88178 17.56100 17.77749 #> 2015 17.25113 17.39147 17.57728 17.35559 #> 2016 17.67971 17.54721 17.84495 17.62967 #> 2017 18.53118 18.54734 18.71306 19.25427 #> 2018 19.27183 19.84259 19.60735 19.88214 #> 2019 20.61475 20.45577 20.50227 20.38120 #> 2020                                     coef(smooth) #> NULL summary(smooth) #>                    Length Class  Mode    #> benchmarked.serie  245    ts     numeric #> lfrate              21    ts     numeric #> smoothed.rate      252    ts     numeric #> hfserie.as.weights 252    ts     numeric #> delta.rate           1    -none- numeric #> model.list           9    -none- list    #> call                 3    -none- call    library(ggplot2) autoplot(in_disaggr(smooth))"},{"path":"https://inseefr.github.io/disaggR/reference/turnover.html","id":null,"dir":"Reference","previous_headings":"","what":"Turnover indicator in construction — turnover","title":"Turnover indicator in construction — turnover","text":"monthly time series containing turnover indicator construction january 2000 may 2020, retrieved 08/12/2020.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/turnover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turnover indicator in construction — turnover","text":"","code":"turnover"},{"path":"https://inseefr.github.io/disaggR/reference/turnover.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Turnover indicator in construction — turnover","text":"time series frequency 12","code":""},{"path":"https://inseefr.github.io/disaggR/reference/turnover.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Turnover indicator in construction — turnover","text":"https://www.insee.fr/fr/statistiques/4636032","code":""},{"path":"https://inseefr.github.io/disaggR/reference/turnover_catering.html","id":null,"dir":"Reference","previous_headings":"","what":"Turnover indicator in accommodation and food services — turnover_catering","title":"Turnover indicator in accommodation and food services — turnover_catering","text":"monthly time series containing turnover indicator accommodation food services january 1999 april 2022, retrieved 04/07/2022.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/turnover_catering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turnover indicator in accommodation and food services — turnover_catering","text":"","code":"turnover_catering"},{"path":"https://inseefr.github.io/disaggR/reference/turnover_catering.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Turnover indicator in accommodation and food services — turnover_catering","text":"time series frequency 12","code":""},{"path":"https://inseefr.github.io/disaggR/reference/turnover_catering.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Turnover indicator in accommodation and food services — turnover_catering","text":"https://www.insee.fr/en/statistiques/serie/010543406","code":""},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"twoStepsBenchmark bends time series time series lower frequency. procedure involved Prais-Winsten regression, additive Denton benchmark. Therefore, resulting time series sum regression fit smoothed part. smoothed part minimizes sum squares differences. resulting time series equal low-frequency series aggregation within benchmark window.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"","code":"twoStepsBenchmark(hfserie,lfserie,include.differenciation=FALSE,include.rho=FALSE,                   set.coeff=NULL,set.const=NULL,                   start.coeff.calc=NULL,end.coeff.calc=NULL,                   start.benchmark=NULL,end.benchmark=NULL,                   start.domain=NULL,end.domain=NULL,outliers=NULL,                   ...)   annualBenchmark(hfserie,lfserie,                 include.differenciation=FALSE,include.rho=FALSE,                 set.coeff=NULL,set.const=NULL,                 start.coeff.calc=start(lfserie)[1L],                 end.coeff.calc=end(lfserie)[1L],                 start.benchmark=start(lfserie)[1L],                 end.benchmark=end.coeff.calc[1L]+1L,                 start.domain=start(hfserie),                 end.domain=c(end.benchmark[1L]+2L,frequency(hfserie)),                 outliers=NULL)"},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"hfserie bended time series. can matrix time series. lfserie time series whose frequency divides frequency hfserie. include.differenciation boolean length 1. TRUE, lfserie hfserie differentiated estimation regression. include.rho boolean length 1. TRUE, regression includes autocorrelation parameter residuals. applied procedure Prais-Winsten estimation. set.coeff optional numeric, allows user set regression coefficients instead evaluating . hfserie matrix, set.coeff can unnamed numeric length 1. Otherwise, set.coeff named numeric, set corresponding coefficients instead evaluating . column name hfserie outlier set outlier arg initialize coefficient name, can set set.coeff. default name non-matrix time series \"hfserie\", example, LS2003 time series can set using set.coeff=c(hfserie=3,LS2003=1). set.const optional numeric length 1, sets regression constant. constant actually automatically added column hfserie. Using set.constant=3 equivalent using set.coeff=c(constant=3). start.coeff.calc optional start estimation coefficients regression. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. end.coeff.calc optional end estimation coefficients regression. numeric length 1 2, like window lfserie. NULL, end defined lfserie's window. start.benchmark optional start lfserie bend hfserie. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. end.benchmark optional end lfserie bend hfserie. numeric length 1 2, like window lfserie. NULL, start defined lfserie's window. start.domain optional output high-frequency series. also defines smoothing window : low-frequency residuals extrapolated contain smallest low-frequency window around high-frequency domain window. numeric length 1 2, like window hfserie. NULL, start defined hfserie's window. end.domain optional end output high-frequency series. also defines smoothing window : low-frequency residuals extrapolated contain smallest low-frequency window around high-frequency domain window. numeric length 1 2, like window hfserie. NULL, start defined hfserie's window. outliers optional named list numeric vectors, whose pattern like list(AO2008T2=c(0,0,3,2),LS2002=c(0.1,0.1,0.1,0.1)) : \"AO\" stands additive outlier \"LS\" level shift integer follows stands outlier starting year optional integer, preceded letter T, stands low-frequency cycle outlier start. numeric vector values stands disaggregated value outlier length must multiple hf / lf outliers coefficients evaluated though regression process, like coefficient. Therefore, outlier outside coefficient calculation window, fixed using set.coeff. ... dots contain cl item, value overwrites value returned call. feature allows build wrappers.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"twoStepsBenchark returns object class \"twoStepsBenchmark\". function summary can used obtain print summary regression used benchmark. functions plot autoplot (generic ggplot2) produce graphics benchmarked serie bending serie. functions in_disaggr, in_revisions, in_scatter produce comparisons plot autoplot can also used. generic accessor functions .ts, prais, coefficients, residuals, fitted.values, model.list, se, rho extract various useful features returned value. object class \"twoStepsBenchmark\" list containing following components : benchmarked.serie time series, result benchmark. equal fitted.values + smoothed.part. fitted.values time series, high-frequency series applied regression coefficients. Compared fitted values regression, can retrieved inside regression component, high-frequency time series can eventually integrated include.differenciation TRUE. regression object class praislm, regression relies benchmark. can extracted function prais smoothed.part smoothed part two-steps benchmark. smoothed difference fitted.values lfserie. model.list list containing arguments submitted function. call matched call (either twoStepsBenchmark annualBenchmark)","code":""},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"annualBenchmark wrapper main function, applies specifically annual series, changes default window parameters ones commonly used quarterly national accounts.","code":""},{"path":"https://inseefr.github.io/disaggR/reference/twoStepsBenchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regress and bends a time series with a lower frequency one — twoStepsBenchmark","text":"","code":"## How to use annualBenchmark or twoStepsBenchark  benchmark <- twoStepsBenchmark(hfserie = turnover,                                lfserie = construction,                                include.differenciation = TRUE) as.ts(benchmark) #>           Jan      Feb      Mar      Apr      May      Jun      Jul      Aug #> 2000 11.17700 11.04207 11.30599 11.37970 11.47701 11.49781 11.72211 11.66105 #> 2001 11.89094 12.04555 11.99175 11.92219 11.97747 11.95641 11.75168 12.11955 #> 2002 12.04505 11.99360 12.01425 12.34021 12.28432 12.23926 12.22597 12.40743 #> 2003 12.54418 12.73492 12.74958 12.77800 12.61418 12.92972 12.98486 13.24296 #> 2004 13.73260 13.75309 13.74720 14.00883 13.99247 14.02048 14.17511 13.97745 #> 2005 14.53067 14.59171 14.68202 14.83262 14.82514 14.93149 15.24996 15.34505 #> 2006 15.76440 15.93940 16.15566 16.15555 16.50044 16.67241 16.81045 16.74473 #> 2007 17.61900 17.79354 17.87374 17.75804 18.19482 18.17083 18.12359 18.12016 #> 2008 18.92809 19.03223 19.44686 19.04125 18.80992 19.06958 19.01202 19.10261 #> 2009 18.04222 17.96939 17.87080 17.86250 17.60512 17.61975 17.66641 17.47091 #> 2010 17.32496 17.03446 17.00853 17.07836 17.31439 17.48615 17.60940 17.52062 #> 2011 18.05172 18.08003 18.22176 18.27064 18.42212 18.27264 18.74332 18.24732 #> 2012 18.45136 18.18350 18.48822 18.42778 18.51033 18.32792 18.64129 18.30657 #> 2013 18.34038 18.07477 17.66732 18.32748 18.30897 18.17121 18.44463 18.53804 #> 2014 17.92671 18.28864 18.24466 18.11978 17.82660 18.34486 17.89213 18.44459 #> 2015 17.52634 17.47515 17.45221 17.36974 17.03088 17.45993 17.36176 17.26746 #> 2016 17.26208 17.56018 17.24353 17.13981 17.54503 17.14966 17.19523 17.22284 #> 2017 17.76444 17.97551 18.43144 17.62106 18.76131 19.03723 18.59887 18.33180 #> 2018 19.13577 19.17966 18.48750 19.26294 18.71357 19.39683 18.99362 19.59312 #> 2019 19.85074 20.11147 20.58103 20.57759 20.55981 20.02988 20.05189 21.22009 #> 2020 20.55408 19.75862 18.79362 16.26410 14.92185                            #>           Sep      Oct      Nov      Dec #> 2000 11.70245 11.73897 11.73440 11.96144 #> 2001 11.80969 12.15522 12.09540 12.18417 #> 2002 12.43825 12.55473 12.32781 12.42910 #> 2003 13.17520 13.33399 13.34131 13.47110 #> 2004 14.33491 14.46016 14.52502 14.57269 #> 2005 15.49772 15.48365 15.86170 15.56830 #> 2006 16.94023 16.87345 17.13330 17.50996 #> 2007 18.21930 18.35075 18.06131 18.41492 #> 2008 18.88726 18.94011 18.32882 18.40127 #> 2009 17.30719 17.41416 17.34217 17.62939 #> 2010 17.87613 17.76407 18.12541 17.95753 #> 2011 18.34994 18.31190 18.76082 18.76779 #> 2012 18.18362 18.33422 18.02311 18.02208 #> 2013 18.36018 18.25783 18.67344 18.93574 #> 2014 17.98186 17.88175 17.57220 17.77621 #> 2015 17.25067 17.38667 17.56694 17.35226 #> 2016 17.67259 17.54543 17.83538 17.62825 #> 2017 18.53872 18.55788 18.72375 19.25800 #> 2018 19.26621 19.82545 19.58871 19.85661 #> 2019 20.63323 20.48732 20.55074 20.44623 #> 2020                                     coef(benchmark) #>   constant    hfserie  #> -1.4082504  0.1682139  summary(benchmark) #>  #> Call: #> twoStepsBenchmark(hfserie = turnover, lfserie = construction,  #>     include.differenciation = TRUE) #>  #>  #> The model includes a differenciation.  #>  #> Residuals: #>    Min. 1st Qu.  Median 3rd Qu.    Max.  #> -4.4490 -2.2050  0.1239  1.7760  4.4660  #>  #>          Estimate   StdErr t.value  p.value     #> constant -1.40825  0.82581  -1.705    0.106     #> hfserie   0.16821  0.01279  13.155 2.44e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 2.746 on 17 degrees of freedom #> Multiple R-squared: 0.9369,\tAdjusted R-squared: 0.9295 #>  #> Portmanteau: #>   statistic p.value                                       #> u     1.335  0.2479   || Where Y = X %*% coefficients + u library(ggplot2) autoplot(in_sample(benchmark))   ## How to manually set the coefficient  benchmark2 <- twoStepsBenchmark(hfserie = turnover,                                 lfserie = construction,                                 include.differenciation = TRUE,                                 set.coeff = 0.1) coef(benchmark2) #> constant  hfserie  #>  1.44013  0.10000"},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-1051","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.5.1","title":"disaggR 1.0.5.1","text":"CRAN release: 2023-10-07 Internal change check package version character instead numeric. Internal minor change in_disaggr (incohesive parameters) informative error message one tries differentiate time-series one observation informative error message rank becomes imperfect decorrelation","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-105","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.5","title":"disaggR 1.0.5","text":"CRAN release: 2023-02-20 Breaking change : order output reViewOutput object reversed. reView rePort can now take language object name arguments return language objects inside name attributes (PR #86) print method digit argument now passed everything . default value getOption(\"digits\") benchmarks max(3L, getOption(\"digits\")) praislm objects.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-1041","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.4.1","title":"disaggR 1.0.4.1","text":"CRAN release: 2022-12-13 Internal change ggplot2 size argument, deprecated lines, linewidth (PR #78)","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-104","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.4","title":"disaggR 1.0.4","text":"Added arguments hfserie_name lfserie_name rePort, reView. (PR #70) Added vignette describing use outliers. (PR #74) reView longer throws message “Font Awesome icon (‘info-circle’) exist”.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-103","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.3","title":"disaggR 1.0.3","text":"CRAN release: 2022-02-22 Added signature c(\"disaggR\",\"missing\") Ops group generic. (PR #54) Inner calls aggregate now redirected faster non-exported function. (PR #55) Estimation spans outliers now handled preset models rePort reView (PR #57) NULL labels now removed even outside plot margins (PR #59) in_scatter function now substracts outliers contributions low-frequency serie computing in_scatter comparison. (PR #63) in_scatter now additional arguments : type (every in_ function). now, use type argument allow changes scatterplots levels models. (PR #63) smoothed.part, differencied benchmarks, set new base (aggregated value 0 2000). way, reUseBenchmark fixed used high-frequency series different start previous one. impact benchmarked serie. (PR #65)","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-102","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.2","title":"disaggR 1.0.2","text":"CRAN release: 2021-08-23 New vignette : Introduction disaggR. error in_disaggR wrong type arguments changed, didn’t include “contributions”. cex.axis, xlim, ylim, cex.lab cex.main parameters now overwrite default used inside plot(...) dots. default, plot autoplot methods, axis annotations now automatically set smaller needed.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-101","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.1","title":"disaggR 1.0.1","text":"CRAN release: 2021-07-21 Switched ggplot2, rmarkdown shiny imports suggests. RColorBrewer replaced scales import. disaggR can now installed far less dependencies. Hence, autoplot generic reexported anymore. ggplot2 attached allow use autoplot without ggplot2:: prefix, example library(ggplot2).","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-100","dir":"Changelog","previous_headings":"","what":"disaggR 1.0.0","title":"disaggR 1.0.0","text":"CRAN release: 2021-06-18 added support outliers. twoStepsBenchmark, set.coeff names used replaced \"hfserie\" NCOL(hfserie) == 1L length(set.coeff) == 1L. behavior contradictory documentation set.coeff=c(constant=1L). now, set.coeff names never replaced. , makes controls stricter set.coeff=c(x.name.herited..anywhere=1) lead error. time-series plots, y window now ignores infinite values.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-021","dir":"Changelog","previous_headings":"","what":"disaggR 0.2.1","title":"disaggR 0.2.1","text":"CRAN release: 2021-05-03 fixed issues ts.eps-delayed tsps.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-020","dir":"Changelog","previous_headings":"","what":"disaggR 0.2.0","title":"disaggR 0.2.0","text":"reView : shiny reviewing application twoStepsBenchmarks. rePort : rmarkdown html report twoStepsBenchmark reView outputs. start.domain end.domain know crops hfserie calculated coefficients. way, possible evaluate coefficients full hfserie, cropping application. in_sample now generates general class \"tscomparison\", \"in_sample\" func attribute. previous versions, S3 class named “insample”. new functions in_scatter, in_benchmark in_revisions also produce tscomparisons, plot autoplot methods. graphics prettier thanks package scales. plot autoplot methods now xlab, ylab, start, end, col, lty, show.legend, main mar arguments. autoplot methods also theme argument. removed c++ code improve readability. stats methods time-series now coerce twoStepsBenchmarks rateSmooths time-series. reUseBenchmark now induces set.smoothed.part element model.list reeval.smoothed.part FALSE. threeRuleSmooth makes easier bflSmooth procede rate smooth.","code":""},{"path":"https://inseefr.github.io/disaggR/news/index.html","id":"disaggr-017","dir":"Changelog","previous_headings":"","what":"disaggR 0.1.7","title":"disaggR 0.1.7","text":"CRAN release: 2020-10-09 various optimizations including cache bflSmooth, now much faster, alternative internal methods time-series. added weights arg bflSmooth, reproduces lissage en taux methodology. praislm twoStepsBenchmark summaries now print disclaimer tell regression includes differenciation.","code":""}]
